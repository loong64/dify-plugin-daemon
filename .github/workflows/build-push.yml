name: Build and Push Daemon

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build'
        required: false
        default: ''
  schedule:
    - cron: '0 20 * * *'

concurrency:
  group: build-push-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  check:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      build: ${{ steps.check-build.outputs.build }}
    steps:
      - name: Check Version
        id: get-version
        run: |
          if [ -n "${{ inputs.version }}" ]; then
            version="${{ inputs.version }}"
          else
            version=$(curl -s 'https://api.github.com/repos/langgenius/dify-plugin-daemon/releases/latest' | jq -r ".tag_name")
          fi
          echo "Current Version: ${version}"
          if [ -z "${version}" ] || [ "${version}" == "null" ]; then
            echo "Failed to get version"
            exit 1
          fi
          echo "version=${version}" >> $GITHUB_ENV
          echo "version=${version}" >> $GITHUB_OUTPUT

      - name: Check Build
        id: check-build
        run: |
          gh release view ${version} -R ${{ github.repository }} >/dev/null 2>&1 || echo "build=1" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    runs-on: ubuntu-latest
    needs: check
    if: needs.check.outputs.build == '1'
    env:
      version: ${{ needs.check.outputs.version }}
    strategy:
      matrix:
        include:
          - service_name: "build-serverless-daemon-loong64"
            image_name_env: "langgenius/dify-plugin-daemon"
            scope: "serverless"
            platform: linux/loong64
          - service_name: "build-local-daemon-loong64"
            image_name_env: "langgenius/dify-plugin-daemon"
            scope: "local"
            platform: linux/loong64

    steps:
      - name: Check Version
        run: |
          echo "Current Version: ${version}"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: langgenius/dify-plugin-daemon
          ref: ${{ env.version }}

      - name: Prepare
        run: |
          sed -i 's@amd64@loong64@g' ./docker/*.dockerfile
          sed -i 's@FROM alpine:3.20@FROM ghcr.io/loong64/alpine:3.21@g' ./docker/*.dockerfile
          sed -i 's@FROM golang@FROM ghcr.io/loong64/golang@g' ./docker/*.dockerfile
          sed -i 's@FROM ubuntu:24.04@FROM ghcr.io/loong64/debian:trixie@g' ./docker/*.dockerfile
          sed -i 's@python3.12@python3.13@g' ./docker/*.dockerfile
          sed -i 's@pip install@pip install -i https://gitlab.com/api/v4/projects/65746188/packages/pypi/simple@g' ./docker/*.dockerfile
          wget -qO - https://github.com/loong64/dify-plugin-daemon/raw/refs/heads/main/patch_loong64.patch | git apply

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./docker/${{ matrix.scope }}.dockerfile
          platforms: ${{ matrix.platform }}
          push: true
          build-args: |
            VERSION=${{ github.sha }}
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ matrix.image_name_env }}:${{ env.version }}-${{ matrix.scope }}
          outputs: type=image,oci-mediatypes=true,compression=zstd,compression-level=3,force-compression=true
          cache-from: type=gha
          cache-to: type=gha,mode=max

  release:
    runs-on: ubuntu-latest
    needs: [ check, build ]
    if: needs.check.outputs.build == '1'
    env:
      version: ${{ needs.check.outputs.version }}
    steps:
      - name: Check Version
        run: |
          echo "Current Version: ${version}"

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ env.version }}
          tag_name: ${{ env.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: langgenius/dify-plugin-daemon
          ref: ${{ env.version }}

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Build CLI
        run: |
          wget -qO - https://github.com/loong64/dify-plugin-daemon/raw/refs/heads/main/patch_loong64.patch | git apply
          go mod tidy
          CGO_ENABLED=0 GOOS=linux GOARCH=loong64 go build -ldflags "-X 'main.VersionX=v${{ env.version }}'" -o dify-plugin-linux-loong64 ./cmd/commandline

      - name: Upload linux binaries to release
        run: |
          gh release upload ${{ env.version }} -R ${{ github.repository }} dify-plugin-linux-loong64 --clobber
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
